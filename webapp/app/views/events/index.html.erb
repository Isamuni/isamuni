<style>
    #mapid {
        height: 400px;
        width: 100%;
    }
</style>

<h3>Eventi correnti e prossimi</h3>
<div class="row">
    <div class="col-md-8">
        <div id="future">
            <%= render partial: "table", locals: {events: @future, event_type: :future} %>
            <%= will_paginate @future, param_name: :future_page %>
        </div>
    </div>
    <div class="col-md-4">
        <h5>Mappa&nbsp;<button id="resetmap" class="btn btn-success btn-sm"><i class="fa fa-refresh">&nbsp;Ricentra</i></button></h5>
        <i id="spinner" class="fa fa-spinner fa-pulse fa-3x fa-fw"></i>
        <div id="mapid" class="map"
                data-intro="Scopri gli eventi correnti e  prossimi usando la mappa.
                            Gli eventi in rosso sono quelli di oggi.
                            Clicca sull'evento per saperne di piÃ¹.">
        </div>
        <br>

    </div>
</div>
<hr/>


<div class="row">
  <div class="col-md-6">
    <h3>Eventi passati</h3>
    <p>Puoi usare la form sulla destra per filtrare gli eventi. Premi il tasto di ricerca per applicare i filtri</p>
  </div>
  <div class="col-md-6">
  <div id="dashboard_div" class="row">
    <div class="row" style="display: none;">
        <div id="chart_div"></div>
    </div>
    <div class="row">
        <div id="filter_div" data-intro="Usa lo slider per scoprire gli eventi passati."></div>
    </div>
    <p>
    <div class="form-group">
      <%= form_tag events_path, :method => "get" do |f| %>
        <div class="input-group">
          <%= text_field_tag :query, nil, class: 'typeahead form-control', autocomplete: 'off', placeholder: "Ricerca eventi" %>

          <input type="hidden" id="start_input" name="start" value="0">
          <input type="hidden" id="end_input" name="end" value="0">

          <span class="input-group-btn">
            <%= button_tag type: "submit", class: "btn btn-primary", name: ""  do %>
                <i class="fa fa-search"></i>
            <% end %>
            <%= link_to events_path, class: "btn btn-default", style: "background-color: #E0E0E0" do %>
              <i class="fa fa-refresh"></i>
            <% end %>
          </span>
        </div>
      <% end %>
    </div>
    </p>
  </div>
</div>

<br>

<div id="old" class="col-md-12">
    <% if @start_time && @end_time %>
        <small>Eventi dal <%= l @start_time, format: :long %> al <%= l @end_time, format: :long %></small>
    <% end %>
    <%= render partial: "table", locals: {events: @old, event_type: :old} %>
    <%= will_paginate @old, param_name: :old_page %>
</div>

<% content_for :scripts do %>
<script type="text/javascript">
  /* global $, google, L, moment, initTypeahead */

    var mymap = null;
    var sicily_coords = [37.5579, 14.1368];
    var zoom = 7;

    function iconForEvent(ev) {
        if (ev.isToday) {
            return L.AwesomeMarkers.icon({icon: 'star', markerColor: 'red', prefix: 'fa', spin: true});
        } else {
            return L.AwesomeMarkers.icon({icon: 'star-o', markerColor: 'blue', prefix: 'fa', spin: false});
        }
    }

    function indexForEvent(ev) {
        if (ev.isToday) {
            return 10000;
        } else {
            return 0;
        }
    }

    function popupForEvent(ev) {
        return ev.name + ' <a href="#" data-toggle="modal" data-target="#' + ev.uid + '"> <i class="fa fa-expand" ></i></a>';
    }

    function markerForEvent(ev) {
        var coordinates = ev.coordinates.split(',');
        var index = indexForEvent(ev);
        var options = {
            icon: iconForEvent(ev)
        };

        return L.marker([
            coordinates[0], coordinates[1]
        ], options).setZIndexOffset(index).bindPopup(popupForEvent(ev));
    }

    function drawMap(locations) {
        if (mymap){
          mymap.remove();
        }
        mymap = L.map('mapid').setView(sicily_coords, zoom);

        var OpenStreetMap_DE = L.tileLayer('http://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        });
        OpenStreetMap_DE.addTo(mymap);

        //draw markers
        var markers = L.markerClusterGroup();
        locations.map(markerForEvent).forEach(function (marker) {
            markers.addLayer(marker);
        });

        mymap.addLayer(markers);

    }

    function drawChart(jsonData) {
        // Create the data table.
        var data = new google.visualization.DataTable(jsonData);
        var dashboard = new google.visualization.Dashboard(document.getElementById('dashboard_div'));

        var timeSlider = new google.visualization.ControlWrapper({
            'controlType': 'ChartRangeFilter',
            'containerId': 'filter_div',
            'options': {
                'filterColumnIndex': 0,
                ui: {
                    chartOptions: {
                        height: 50,
                        chartArea: {
                            width: '100%'
                        }
                    },
                    chartView: {
                        columns: [0, 1]
                    }
                }
            },
            'state': {
                'range': {
                    'start': moment().subtract(2,'years').toDate(),
                    'end': new Date()
                }
            }
        });

        // This chart must be present, otherwise the filter cannot be drawn.
        var chart = new google.visualization.ChartWrapper({
            chartType: 'LineChart',
            containerId: 'chart_div',
            options: {
                curveType: 'function',
                legend: 'none',
                vAxis: {
                    viewWindow: {
                        min: 0
                    }
                },
                series: {
                    0: {
                        color: '#1B5E20'
                    }
                }
            }
        });

        google.visualization.events.addListener(timeSlider, 'statechange', selectHandler);

        var timeout = null;
        function selectHandler() {
          if (timeout) {
            clearTimeout(timeout);
            timeout = null;
          }
          timeout = setTimeout(applySlider, 50); // 10ms
        }

        function applySlider() {
          var range = timeSlider.getState().range;
          var start = range.start.getTime();
          var end = range.end.getTime();

          $('#start_input').val(start);
          $('#end_input').val(end);
        }

        dashboard.bind(timeSlider, chart);
        dashboard.draw(data);
        applySlider();
    }

    function onGoogleChartsLoaded() {
        $('#spinner').show();

        var locationsRequest = $.get("/events/locations", drawMap);
        var storedJsonData;

        locationsRequest.done(function() {
          $('#spinner').hide();
        });

        var allEventsRequest = $.ajax({url: "/events/all_events", dataType: "json"});

        allEventsRequest.fail(function(error){
            console.error(error);
        });

        allEventsRequest.done(function(jsonData){
            storedJsonData = jsonData;
            drawChart(jsonData);
        });

        $(window).resize(function () {
            if(storedJsonData)
                drawChart(storedJsonData);
        });
    }

    $(document).ready(function () {
        initTypeahead('/events/typeahead', 'https://www.facebook.com/events/');

        $('#resetmap').click(function() {
            mymap.setView(sicily_coords, zoom);
        });

          $( "button[coordinates-id]" ).click(function() {
            var coordinates = $(this).attr('coordinates-id');
            coordinates = coordinates.split(',');

            mymap.setView(new L.LatLng(coordinates[0], coordinates[1]), 13);
          });

        google.charts.setOnLoadCallback(onGoogleChartsLoaded);
    });
</script>
<% end %>
