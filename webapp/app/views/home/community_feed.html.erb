<h2>Post dalla community di PAC</h2>
<p>Breve descrizione della pagina e come usarla</p>
<div id="dashboard_div" class="row">
  <div class="row">
    <div id="chart_div" data-intro="This graph shows you all groups' posts over time"></div>
  </div>
  <div class="row">
    <div id="filter_div" data-intro="Use the slider to navigate older posts (we will never show you more than 30 posts at a time)"></div>
  </div>
</div>

<br>

<div class="row">
    <div class="col-lg-8">
      <div id="posts-view" class="card-columns">
        <%= render partial: "posts", locals: {posts: @posts} %>
      </div>
    </div>

    <div class="col-lg-4">
      <% @posts_jobs.each_with_index do |post, index| %>
      <div class="card" style="background-color: #90CAF9; border-color: #64B5F6;" <% if index==0 %> data-intro="This is a post about a job advertisement recently posted on the group PAC" data-position='left' <% end %>>
        <%= render partial: "card", locals: {post: post} %>
      </div>
      <% end %>
    </div>
</div>

<script type="text/javascript">
  // Set a callback to run when the Google Visualization API is loaded.
  google.charts.setOnLoadCallback(drawChart);

  function drawChart() {
    var jsonData = $.ajax({url: "/home/data", dataType: "json", async: false}).responseText;

    // Create the data table.
    var data = new google.visualization.DataTable(jsonData);

    var dashboard = new google.visualization.Dashboard(document.getElementById('dashboard_div'));

    var today = new Date();
    var last_sixty = new Date(today.getTime() - (60 * 60 * 24 * 60 * 1000));
    var timeSlider = new google.visualization.ControlWrapper({
      'controlType': 'ChartRangeFilter',
      'containerId': 'filter_div',
      'options': {
        'filterColumnIndex': 0,
        ui: {
          chartOptions: {
            height: 50,
            chartArea: {
              width: '80%'
            }
          },
          chartView: {
            columns: [0, 1]
          }
        }
      },
      'state': {
        'range': {
          'start': last_sixty,
          'end': today
        }
      }
    });

    var chart = new google.visualization.ChartWrapper({
      chartType: 'LineChart',
      containerId: 'chart_div',
      options: {
        curveType: 'function',
        legend: 'none',
        vAxis: {
          viewWindow: {
            min: 0
          }
        },
        series: {
          0: {
            color: '#1B5E20'
          }
        }
      }
    });

    google.visualization.events.addListener(chart, 'select', pickHandler);
    google.visualization.events.addListener(timeSlider, 'statechange', selectHandler);

    function pickHandler() {
      var selection = chart.getChart().getSelection();
      if (selection.length > 0) {
        var datePicked = data.getValue(selection[0].row, 0);
        var nextDay = new Date(datePicked.getTime() + (1 * 60 * 24 * 60 * 1000));

        // FIXME - date is not picked correctly if slider is used
        reloadPosts(datePicked.getTime(), nextDay.getTime());
      } else {
        applySlider();
      }

    }

    var timeout = null;
    function selectHandler(e) {
      if (timeout) {
        clearTimeout(timeout);
        timeout = null;
      }
      timeout = setTimeout(applySlider, 1000);
    }

    function applySlider() {
      var range = timeSlider.getState().range;
      var start = range.start.getTime();
      var end = range.end.getTime();

      reloadPosts(start, end);
    }

    function reloadPosts(start, end) {
      $.ajax({
        type: 'GET',
        url: '/home/posts',
        data: {
          'start': start,
          'end': end
        }
      }).done(function (data) {
        $('#posts-view').html(data);
      }).fail(function (error) {
        console.error("reloadPosts failed");
        console.error(error);
      })
    }

    dashboard.bind(timeSlider, chart);
    dashboard.draw(data);
  }

  $(window).resize(function () {
    drawChart();
  });
</script>
